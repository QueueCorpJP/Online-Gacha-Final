# ファイル機能用途一覧

## フロントエンド

### frontend/app/gacha/result/client.tsx
- ガチャの結果表示を担当するクライアントコンポーネント
- 主な機能：
  - ガチャ結果の表示（アイテム、レア度、個数など）
  - 動画演出の再生
  - レア度ごとのアイテムグループ化
  - 在庫管理と在庫切れ時の処理
  - 再度ガチャを引く機能
- 修正内容：
  - リダイレクト管理のための参照変数追加（isRedirecting）
  - 安全なリダイレクト関数実装（safeRedirect）
  - 動画読み込みと再生処理改善（動的にソースを追加）
  - エラーハンドリング強化
  - レアリティのソート順序修正
  - アイテム表示処理改善
  - 動画再生エラー時の処理強化
  - 動画演出後の即時結果表示
  - 在庫状態管理機能追加
  - 在庫がない場合のボタン無効化
  - エラー画面ではなくトーストメッセージ表示
  - 在庫切れ時にe.preventDefault()を使用して遷移を防止
  - 在庫確認機能の強化
  - 「ガチャに戻る」ボタンを削除
  - ボタン表示をシンプルな価格表示のみに変更
  - ボタンのレイアウト調整（中央揃え）

### frontend/components/product/purchase-options.tsx
- ガチャ購入オプションを表示するコンポーネント
- 主な機能：
  - 購入オプションの表示（1回、10回など）
  - 価格表示
  - 購入処理
  - 結果ページへのリダイレクト
- 修正内容：
  - 安全なリダイレクト関数実装（safeRedirect）
  - リダイレクト管理のための参照変数追加（isRedirecting）
  - エラーハンドリング強化
  - 在庫確認機能の追加
  - 在庫切れ時にe.preventDefault()を使用して遷移を防止
  - 在庫がない場合のボタン無効化と視覚的フィードバック（AlertCircleアイコン）

### frontend/components/profile/profile-image-upload.tsx
- プロフィール画像アップロードを担当するコンポーネント
- 主な機能：
  - 画像のドラッグ&ドロップ機能
  - 画像のプレビュー表示
  - 画像のアップロード処理
  - 画像の削除機能
- 技術要素：
  - react-dropzoneを使用したファイルアップロードUI
  - S3へのアップロード前の画像プレビュー
  - ファイルサイズと形式の検証

### frontend/components/profile/profile-form.tsx
- プロフィール情報編集フォームコンポーネント
- 主な機能：
  - ユーザープロフィール情報の表示と編集
  - プロフィール画像のアップロード統合
  - フォームバリデーション
- 修正内容：
  - ProfileImageUploadコンポーネントの統合
  - プロフィール画像URLの状態管理追加
  - 画像アップロード後のプロフィール更新処理追加

### frontend/redux/features/profileSlice.ts
- プロフィール情報の状態管理を担当するReduxスライス
- 主な機能：
  - プロフィール情報の取得
  - プロフィール情報の更新
  - プロフィール画像のアップロード
- 修正内容：
  - プロフィール画像関連の状態とアクションの追加
  - 画像アップロード非同期アクションの実装
  - プロフィール情報の型定義にprofileUrlを追加

## バックエンド

### backend/
- バックエンドAPIの実装
- 主な機能：
  - ガチャデータの管理
  - ガチャ実行処理
  - 在庫管理
  - ユーザー管理
  - 決済処理

### backend/src/modules/s3/s3.module.ts
- AWS S3連携のためのモジュール
- 主な機能：
  - S3クライアントの初期化と提供
  - 環境変数からの設定読み込み
  - S3サービスのエクスポート

### backend/src/modules/s3/s3.service.ts
- S3操作のためのサービス
- 主な機能：
  - 画像アップロード処理
  - 署名付きURL生成
  - 画像削除処理
- 技術要素：
  - AWS SDK for JavaScriptのS3クライアント
  - S3署名付きURL生成
  - コンテンツタイプ検証

### backend/src/modules/profile/profile.controller.ts
- プロフィール機能のコントローラー
- 主な機能：
  - プロフィール情報の取得
  - プロフィール情報の更新
  - プロフィール画像のアップロード
- 修正内容：
  - 画像アップロードエンドポイントの追加
  - S3サービスとの連携
  - CurrentUserデコレータによるセッション検証

### backend/src/modules/profile/profile.service.ts
- プロフィール機能のサービス
- 主な機能：
  - プロフィール情報の取得と更新
  - プロフィール画像URLの保存
- 修正内容：
  - プロフィール画像URL更新メソッドの追加
  - getProfileメソッドにprofileUrl情報を追加

### backend/src/modules/user/entities/user.entity.ts
- ユーザー情報を管理するエンティティ
- 主な機能：
  - ユーザー情報のデータモデル定義
  - データベースとのマッピング
- 修正内容：
  - profileUrlカラムの追加（VARCHAR、nullable）

### backend/src/migrations/xxxx-add-profile-url-to-users.ts
- ユーザーテーブルにprofileUrlカラムを追加するマイグレーション
- 主な機能：
  - データベーススキーマの更新
  - 既存データの互換性維持

【backend/src/modules/gacha/gacha.controller.ts】
- ガチャ機能の管理用コントローラー。
- 画像アップロード時のファイル名生成処理と拡張子の小文字統一、fileFilterの正規表現修正。

【backend/src/modules/news-blog/news-blog.controller.ts】
- ニュース・ブログ機能の管理用コントローラー。
- 画像アップロード時のファイル名生成処理と拡張子の小文字統一、fileFilterの正規表現修正。

【今回の修正内容】
- 画像アップロード時、拡張子を小文字に統一するよう修正。
- fileFilterの正規表現にiフラグを追加し、大文字小文字を区別せずjpg/jpeg/pngを許可。
- これによりpngファイルが0バイトで保存される問題の解消を狙う。

【frontend/components/cards/gacha-card.tsx】
- ガチャカードを表示するコンポーネント。
- 画像、タイトル、価格、在庫数などの情報を表示。
- NEWバッジがカード画像の前面に表示されるようにz-index:10を追加。
- 多言語対応のためのタイトル表示処理を含む。

【frontend/app/forgot-password/sent/page.tsx】
- パスワードリセットリンク送信完了ページ。
- フォーム送信後に自動遷移し、ユーザーに「送信しました！」を案内。
- /login へのリンクあり。

【frontend/app/reset-password/sent/page.tsx】
- パスワード再設定完了ページ。
- パスワードリセット完了後に自動遷移し、ユーザーに「パスワードがリセットされました！」を案内。
- /login へのリンクあり。

【backend/src/modules/user/entities/user.entity.ts】
- ユーザー情報を管理するエンティティ。
- プロフィール情報、認証情報、コイン残高などを保持。
- Prize エンティティとのリレーション設定を修正（@OneToMany デコレータを追加し、逆参照を削除）。
- profileUrl カラムを追加して、ユーザープロフィール画像のS3 URLを保存。

【backend/src/modules/prizes/prize.entity.ts】
- 景品情報を管理するエンティティ。
- ユーザーが獲得した景品の名前、画像、配送状況などを保持。
- User エンティティとの ManyToOne リレーション設定を修正。

【backend/src/app.module.ts】
- アプリケーションのルートモジュール。
- 各機能モジュールのインポートと設定を行う。
- PrizeModule を追加して Prize エンティティを正しく読み込めるようにした。
- JwtModuleをグローバルモジュールとして登録し、アプリケーション全体で利用可能にした。
- S3Moduleを追加してAWS S3連携機能を提供。
- これにより「Nest can't resolve dependencies of the AuthGuard」エラーを根本的に解決。

【backend/src/modules/prizes/prize.service.ts】
- 景品関連の処理を行うサービス。
- ユーザーIDに基づく景品の取得、ステータス更新、コインへの変換などの機能を提供。
- クエリ形式を修正して正しくユーザーの景品を取得できるようにした。

【backend/src/modules/prizes/prize.module.ts】
- 景品機能のモジュール定義。
- AuthModuleをインポートして、認証関連の機能を利用可能にする。
- AuthModuleは既にJwtServiceとAuthGuardを適切に設定・エクスポートしているため、これを再利用。
- 最小限の変更でエラーを解決し、既存の機能を維持。

【backend/src/modules/prizes/prize.controller.ts】
- 景品関連のエンドポイントを提供するコントローラー。
- AuthGuardを使用して認証済みユーザーのみがアクセスできるように保護。
- CurrentUserデコレータを使用してリクエストからユーザー情報を取得。

【backend/src/main.ts】
- アプリケーションのエントリーポイント。
- NestJSの組み込みCORS機能を使用して、クロスオリジンリクエストを適切に処理。
- 全リクエストに対してCORSヘッダーを付与するミドルウェアを追加。
- OPTIONSリクエスト（プリフライトリクエスト）に対して204ステータスを返すように修正。

【backend/vercel.json】
- Vercelデプロイメント設定ファイル。
- CORSヘッダーを複数のドメイン（oripa-shijon.comとwww.oripa-shijon.com）に対応するよう修正。
- OPTIONSリクエストに対するステータスコードを204に変更し、標準に準拠。

## デプロイ関連

### .github/workflows/deploy.yml
- GitHub ActionsによるCI/CDパイプライン設定ファイル
- 主な機能：
  - masterブランチへのプッシュ時に自動デプロイを実行
  - EC2サーバーへのSSH接続とデプロイ処理
  - バックエンドとフロントエンドのビルドと再起動
- 重要な設定：
  - 権限問題解決のためのchownとchmod設定
  - git操作の順序（権限設定前にgit操作を行う）
  - node_modulesの削除と再インストール
  - AWS SDKパッケージの明示的インストール
  - PM2によるプロセス管理

### backend/package.json
- バックエンドの依存関係管理ファイル
- AWS関連の依存関係：
  - @aws-sdk/client-s3: S3クライアント
  - @aws-sdk/s3-request-presigner: 署名付きURL生成

### frontend/package.json
- フロントエンドの依存関係管理ファイル
- 主要な依存関係：
  - Next.js: Reactフレームワーク
  - Redux: 状態管理
  - Stripe: 決済処理
  - Tailwind CSS: スタイリング

【backend/src/main.ts】
- アプリケーションのエントリーポイント。
- NestJSの組み込みCORS機能を使用して、クロスオリジンリクエストを適切に処理。
- 全リクエストに対してCORSヘッダーを付与するミドルウェアを追加。
- OPTIONSリクエスト（プリフライトリクエスト）に対して204ステータスを返すように修正。 